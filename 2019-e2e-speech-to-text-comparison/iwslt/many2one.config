#!crnn/rnn.py
# kate: syntax python;

import os
import numpy
from subprocess import check_output, CalledProcessError
from Pretrain import WrapEpochValue

# task
use_tensorflow = True
task = config.value("task", "train")
device = "gpu"
multiprocessing = True
update_on_device = True

debug_mode = False
if int(os.environ.get("DEBUG", "0")):
    print("** DEBUG MODE")
    debug_mode = True

if config.has("beam_size"):
    beam_size = config.int("beam_size", 0)
    print("** beam_size %i" % beam_size)
else:
    beam_size = 12


_cf_cache = {}

def cf(filename):
    """Cache manager"""
    if filename in _cf_cache:
        return _cf_cache[filename]
    if debug_mode or check_output(["hostname"]).strip().decode("utf8") in ["cluster-cn-211", "valin"]:
        print("use local file: %s" % filename)
        return filename  # for debugging
    try:
        cached_fn = check_output(["cf", filename]).strip().decode("utf8")
    except CalledProcessError:
        print("Cache manager: Error occured, using local file")
        return filename
    assert os.path.exists(cached_fn)
    _cf_cache[filename] = cached_fn
    return cached_fn

# data
#num_inputs = 80  # mfcc
#num_outputs = {"target_text_sprint": (5389, 1), "data": (num_inputs, 2), "source_text": (22321, 1), "target_text": (22460, 1)}  # see vocab
train_translation_file_postfix =  "train_double" # "iwslt2018"
dev_translation_file_postfix = "iwslt2018"


EpochSplit = 400


def get_sprint_dataset(data, is_search=False):
    assert data in {"train", "cv", "dev2010"}
    epoch_split = {"train": EpochSplit}.get(data, 1)

    files = {}
    files["features"] = {"train": "/work/smt3/bahar/expriments/st/iwslt2018/iwslt2018/iwslt/mfcc80/mfcc80.train.bundle",
                         "cv":  "/work/smt3/bahar/expriments/st/iwslt2018/iwslt2018/iwslt/mfcc80/mfcc80.train.bundle",
                         "test2015": "/work/smt3/bahar/expriments/st/iwslt2018/iwslt2018/iwslt/sets/mfcc80/mfcc80.sets.bundle",
                         "dev2010": "/work/smt3/bahar/expriments/st/iwslt2018/iwslt2018/iwslt/sets/mfcc80/mfcc80.sets.bundle"}[data]
    files["config"] = "/work/smt3/bahar/expriments/st/iwslt2018/features/direct-st/shared/config/training.config"
    files["corpus"] = {"train": "/work/smt3/bahar/expriments/st/iwslt2018/iwslt2018/iwslt/multi_source_pp-bpe-as-bahar/04_final/iwslt-corpus-train.upvalign2.correct-utterance-ids.corpus.sorted.ctc_en.bpe10k.xml",
                       "cv": "/work/smt3/bahar/expriments/st/iwslt2018/iwslt2018/iwslt/multi_source_pp-bpe-as-bahar/04_final/iwslt-corpus-train.upvalign2.correct-utterance-ids.corpus.sorted.ctc_en.bpe10k.xml",
                       "test2015": "/work/smt3/bahar/expriments/st/iwslt2018/iwslt2018/iwslt/sets/iwslt.tst2015.upvalign2.corpus.xml.gz",
                       "dev2010": "/work/smt3/bahar/expriments/st/iwslt2018/iwslt2018/iwslt/sets/iwslt.dev2010.upvalign2.corpus.xml"}[data]

    if data in ["train", "cv"]:
        files["segments"] = {"train": "/work/smt3/bahar/expriments/st/iwslt2018/features/direct-st/shared/dependencies/seg_train",
                             "cv":    "/work/smt3/bahar/expriments/st/iwslt2018/features/direct-st/shared/dependencies/seg_cv"}[data]
    for k, v in sorted(files.items()):
        assert os.path.exists(v), "%s %r does not exist" % (k, v)
    estimated_num_seqs = {"train": 152746, "dev": 17481, "dev2010": 888}  # wc -l segment-file (train+dev=total segments)

    args = [
        "--config=" + files["config"],
        lambda: "--*.corpus.file=" + cf(files["corpus"]),
#        lambda: "--*.corpus.segments.file=" + (cf(files["segments"]) if "segments" in files else ""),
        "--*.corpus.segment-order-shuffle=false",
        "--*.segment-order-sort-by-time-length=false",
        "--*.segment-order-sort-by-time-length-chunk-size=-1", #%i" % {"train": (EpochSplit or 1) * 1000}.get(data, -1),
        lambda: "--*.feature-cache-path=" + files["features"],
        "--*.log-channel.file=/dev/null",
        #"--*.log-channel.file=sprint-%s.log" % data,
        #"--*.log-channel.unbuffered=true",
        "--*.window-size=1",
    ]
    d = {
        "class": "ExternSprintDataset", "sprintTrainerExecPath": "/work/smt3/bahar/expriments/st/iwslt2018/features/direct-st/shared/sprint-executables/nn-trainer",
        "sprintConfigStr": args,
        "partitionEpoch": 1,
        "estimated_num_seqs": estimated_num_seqs[data] if data in estimated_num_seqs else None,
        #'seq_list_from_parent': not is_search,
        "input_stddev": 3.,
        "orth_vocab": {
        "vocab_file": "/work/smt3/bahar/expriments/st/iwslt2018/features/direct-st/translation_dataset/target.vocab.pkl" if is_search else "/work/smt3/bahar/expriments/st/iwslt2018/iwslt2018/iwslt/multi_source_pp-bpe-as-bahar/04_final/vocab.ctc_en.bpe10k.pkl",
        "unknown_label": "<UNK>",
        "seq_postfix": [0] }
    }
    return d

train_sprint = get_sprint_dataset("train")
dev_sprint = get_sprint_dataset("cv")
dev2010_sprint = get_sprint_dataset("dev2010", is_search=True)
#cv_sprint = get_sprint_dataset("cv", is_search=True)


train_translation = {"class": "TranslationDataset",
                      "path": "/work/smt3/bahar/expriments/st/iwslt2018/features/direct-st/translation_dataset",
                      "file_postfix": train_translation_file_postfix,
                      "unknown_label": "<UNK>",
                      "source_postfix": " </S>",
                      "target_postfix": " </S>"}
                      #"seq_ordering": "sorted"}

dev_translation = train_translation.copy()
dev_translation["file_postfix"] = dev_translation_file_postfix

train = {"class": "MetaDataset", "seq_list_file": cf("/work/smt3/bahar/expriments/st/iwslt2018/iwslt2018/iwslt/multi_source_pp-bpe-as-bahar/04_final/seq_list.train.multi-source.30p.pkl"), "seq_lens_file": "", #"dataset/seq_lens.json",
    "datasets": {"sprint": train_sprint, "translation": train_translation},
    "data_map": {"data": ("sprint", "data"),
                 "target_text_sprint": ("sprint", "orth_classes"),
                 "source_text": ("translation", "data"),
                 "target_text": ("translation", "classes")},
    "data_dims": {"data": [80, 2],
                  "target_text_sprint": [5389, 1],
                  "source_text": [22321, 1],
                  "target_text": [22460, 1]},
     "seq_ordering": "random",
    "partition_epoch": EpochSplit,
}

dev = train.copy()
dev["seq_list_file"] = "/work/smt3/bahar/expriments/st/iwslt2018/iwslt2018/iwslt/multi_source_pp-bpe-as-bahar/04_final/seq_list.cv.pkl"
dev["datasets"] = {"sprint": dev_sprint, "translation": dev_translation}
dev["partition_epoch"] = None


#train = get_sprint_dataset("train")
#dev = get_sprint_dataset("cv")
cache_size = "0"
window = 1

# network
# (also defined by num_inputs & num_outputs)
EncKeyTotalDim = 1024
AttNumHeads = 1
EncKeyPerHeadDim = EncKeyTotalDim // AttNumHeads
EncValueTotalDim = 1024
EncValuePerHeadDim = EncValueTotalDim // AttNumHeads
LstmDim = EncValueTotalDim // 2
LstmDimText = LstmDim


num_inputs = 80  # mfcc
num_outputs = {"target_text_sprint": (5389, 1), "data": (num_inputs, 2), "source_text": (22321, 1), "target_text": (22460, 1)}  # see vocab
target = "target_text"
audio_input = "data:data"
#if task != "search":
#    audio_input = "data:data"
#    default_input = "data"
#    target = "target_text"
#    num_outputs = {"target_text_sprint": (5389, 1), "data": (num_inputs, 2), "source_text": (22321, 1), "target_text": (22460, 1)}  # see vocab
#else:

if task == "search":
    audio_input = "data"
    #default_input = "data"
    target = "orth_classes"
    num_outputs = {"data": (num_inputs, 2), "orth_classes": (22460, 1)}  # see vocab

network = {
"source": {"class": "eval", "eval": "tf.clip_by_value(source(0), -3.0, 3.0)", "from": [audio_input]},

"lstm0_fw" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDim, "direction": 1, "from": ["source"] },
"lstm0_bw" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDim, "direction": -1, "from": ["source"] },
"lstm0_pool": {"class": "pool", "mode": "max", "padding": "same", "pool_size": (2,), "from": ["lstm0_fw", "lstm0_bw"], "trainable": False},

"lstm1_fw" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDim, "direction": 1, "from": ["lstm0_pool"], "dropout": 0.3 },
"lstm1_bw" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDim, "direction": -1, "from": ["lstm0_pool"], "dropout": 0.3 },
"lstm1_pool": {"class": "pool", "mode": "max", "padding": "same", "pool_size": (2,), "from": ["lstm1_fw", "lstm1_bw"], "trainable": False},

"lstm2_fw" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDim, "direction": 1, "from": ["lstm1_pool"], "dropout": 0.3 },
"lstm2_bw" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDim, "direction": -1, "from": ["lstm1_pool"], "dropout": 0.3 },
"lstm2_pool": {"class": "pool", "mode": "max", "padding": "same", "pool_size": (2,), "from": ["lstm2_fw", "lstm2_bw"], "trainable": False},

"lstm3_fw" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDim, "direction": 1, "from": ["lstm2_pool"], "dropout": 0.3 },
"lstm3_bw" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDim, "direction": -1, "from": ["lstm2_pool"], "dropout": 0.3 },
"lstm3_pool": {"class": "pool", "mode": "max", "padding": "same", "pool_size": (1,), "from": ["lstm3_fw", "lstm3_bw"], "trainable": False},

"lstm4_fw" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDim, "direction": 1, "from": ["lstm3_pool"], "dropout": 0.3 },
"lstm4_bw" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDim, "direction": -1, "from": ["lstm3_pool"], "dropout": 0.3 },
"lstm4_pool": {"class": "pool", "mode": "max", "padding": "same", "pool_size": (1,), "from": ["lstm4_fw", "lstm4_bw"], "trainable": False},

"lstm5_fw" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDim, "direction": 1, "from": ["lstm4_pool"], "dropout": 0.3 },
"lstm5_bw" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDim, "direction": -1, "from": ["lstm4_pool"], "dropout": 0.3 },

"encoder": {"class": "copy", "from": ["lstm5_fw", "lstm5_bw"]},  # dim: EncValueTotalDim
"enc_ctx": {"class": "linear", "activation": None, "with_bias": True, "from": ["encoder"], "n_out": EncKeyTotalDim},  # preprocessed_attended in Blocks
"inv_fertility": {"class": "linear", "activation": "sigmoid", "with_bias": False, "from": ["encoder"], "n_out": AttNumHeads},
"enc_value": {"class": "split_dims", "axis": "F", "dims": (AttNumHeads, EncValuePerHeadDim), "from": ["encoder"]},  # (B, enc-T, H, D'/H)



"output": {"class": "rec", "from": [], 'cheating': config.bool("cheating", False), "unit": {
    'output': {'class': 'choice', 'target': target, 'beam_size': beam_size, 'cheating': config.bool("cheating", False), 'from': ["output_prob"], "initial_output": 0},
    "end": {"class": "compare", "from": ["output"], "value": 0},
    'target_embed': {'class': 'linear', 'activation': None, "with_bias": False, 'from': ['output'], "n_out": 621, "initial_output": 0},  # feedback_input
    "weight_feedback": {"class": "linear", "activation": None, "with_bias": False, "from": ["prev:accum_att_weights"], "n_out": EncKeyTotalDim},
    "weight_feedback_text": {"class": "linear", "activation": None, "with_bias": False, "from": ["prev:accum_att_weights_text"], "n_out": EncKeyTotalDim},    
    "s_transformed": {"class": "linear", "activation": None, "with_bias": False, "from": ["s"], "n_out": EncKeyTotalDim},
    
    "energy_in": {"class": "combine", "kind": "add", "from": ["base:enc_ctx", "weight_feedback", "s_transformed"], "n_out": EncKeyTotalDim},
    "energy_tanh": {"class": "activation", "activation": "tanh", "from": ["energy_in"]},
    "energy": {"class": "linear", "activation": None, "with_bias": False, "from": ["energy_tanh"], "n_out": AttNumHeads},  # (B, enc-T, H)
    "att_weights": {"class": "softmax_over_spatial", "from": ["energy"]},  # (B, enc-T, H)
    "accum_att_weights": {"class": "eval", "from": ["prev:accum_att_weights", "att_weights", "base:inv_fertility"],
        "eval": "source(0) + source(1) * source(2) * 0.5", "out_type": {"dim": AttNumHeads, "shape": (None, AttNumHeads)}},
    "att0": {"class": "generic_attention", "weights": "att_weights", "base": "base:enc_value"},  # (B, H, V)
    "att_audio": {"class": "merge_dims", "axes": "except_batch", "from": ["att0"]},  # (B, H*V)

    "att": {"class": "copy", "from" : ["att_audio"]}, # overwritten in training

    "s": {"class": "rnn_cell", "unit": "LSTMBlock", "from": ["prev:target_embed", "prev:att"], "n_out": 1000},  # transform
    "readout_in": {"class": "linear", "from": ["s", "prev:target_embed", "att"], "activation": None, "n_out": 1000},  # merge + post_merge bias
    "readout": {"class": "reduce_out", "mode": "max", "num_pieces": 2, "from": ["readout_in"]},
    "output_prob": {
        "class": "softmax", "from": ["readout"], "dropout": 0.3,
        "target": target, "loss": "ce", "loss_opts": {"label_smoothing": 0.1}}
    }, "target": target, "max_seq_len": 200}, #"max(max_len_from('base:encoder'), max_len_from('base:encoder_text')) * 3"},

"decision": {
    "class": "decide", "from": ["output"], "loss": "edit_distance", "target": target,
    "loss_opts": {
        #"debug_print": True
        }
    },

#"ctc": {"class": "softmax", "from": ["encoder"], "loss": "ctc", "target": "source_text",
#    "loss_opts": {"beam_width": 1, "ctc_opts": {"ignore_longer_outputs_than_inputs": True}}}
}



# additional layers not relevant for search with oudio data only
network_source_enc = {
    "source_text": {"class": "linear", "activation": None, "with_bias": False, "n_out": 620, "from": ["data:source_text"]},

    "lstm0_fw_text" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDimText, "direction": 1, "from": ["source_text"] },
    "lstm0_bw_text" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDimText, "direction": -1, "from": ["source_text"] },

    "lstm1_fw_text" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDimText, "direction": 1, "from": ["lstm0_fw_text", "lstm0_bw_text"] },
    "lstm1_bw_text" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDimText, "direction": -1, "from": ["lstm0_fw_text", "lstm0_bw_text"] },

    "lstm2_fw_text" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDimText, "direction": 1, "from": ["lstm1_fw_text", "lstm1_bw_text"] },
    "lstm2_bw_text" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDimText, "direction": -1, "from": ["lstm1_fw_text", "lstm1_bw_text"] },

    "lstm3_fw_text" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDimText, "direction": 1, "from": ["lstm2_fw_text", "lstm2_bw_text"] },
    "lstm3_bw_text" : { "class": "rec", "unit": "nativelstm2", "n_out" : LstmDimText, "direction": -1, "from": ["lstm2_fw_text", "lstm2_bw_text"] },

    "encoder_text": {"class": "copy", "from": ["lstm3_fw_text", "lstm3_bw_text"]},
    "enc_ctx_text": {"class": "linear", "activation": None, "with_bias": True, "from": ["encoder_text"], "n_out": EncKeyTotalDim},
    "inv_fertility_text": {"class": "linear", "activation": "sigmoid", "with_bias": False, "from": ["encoder_text"], "n_out": AttNumHeads},
    "enc_value_text": {"class": "split_dims", "axis": "F", "dims": (AttNumHeads, EncValuePerHeadDim), "from": ["encoder_text"]},  # (B, enc-T, H, D'/H)

    #"encoder_switch": {"class": "switch", "condition": "length_is_empty", "true_from": "encoder", "false_from": "encoder_text"},
    #"length": {"class": "length", "from": ["data:source_text"]},
    #"length_is_empty": {"class": "compare", "value": 0, "from": ["length"], "kind": "less_equal"},
    "audio_length": {"class": "length", "from": [audio_input]},
    "audio_length_is_empty": {"class": "compare", "value": 1, "from": ["audio_length"], "kind": "less_equal"},
}


network_output_unit_source_enc = {
    "energy_in_text": {"class": "combine", "kind": "add",
                       "from": ["base:enc_ctx_text", "weight_feedback_text", "s_transformed"], "n_out": EncKeyTotalDim},
    "energy_tanh_text": {"class": "activation", "activation": "tanh", "from": ["energy_in_text"]},
    "energy_text": {"class": "linear", "activation": None, "with_bias": False, "from": ["energy_tanh_text"],
                    "n_out": AttNumHeads},  # (B, enc-T, H)
    "att_weights_text": {"class": "softmax_over_spatial", "from": ["energy_text"]},  # (B, enc-T, H)
    "accum_att_weights_text": {"class": "eval",
                               "from": ["prev:accum_att_weights_text", "att_weights_text", "base:inv_fertility_text"],
                               "eval": "source(0) + source(1) * source(2) * 0.5",
                               "out_type": {"dim": AttNumHeads, "shape": (None, AttNumHeads)}},
    "att0_text": {"class": "generic_attention", "weights": "att_weights_text", "base": "base:enc_value_text"},
# (B, H, V)
    "att_text": {"class": "merge_dims", "axes": "except_batch", "from": ["att0_text"]},  # (B, H*V)
    "att": {"class": "switch", "condition": "base:audio_length_is_empty", "true_from": "att_text", "false_from": "att_audio"},
}


if task != "search":
    network.update(network_source_enc)
    network["output"]["unit"].update(network_output_unit_source_enc)



search_output_layer = "decision"
debug_print_layer_output_template = True

# trainer
batching = "random"
log_batch_size = True
#batch_size = 8000 # for pretraining sub epochs 1-10
#max_seqs = 65
batch_size = 14000
max_seqs = 100
#max_seqs = 2
#max_seq_length = {"target_text": 75}
if task == "search":
    max_seq_length = 0
else:
    max_seq_length = {"target_text": 75}

#chunking = ""  # no chunking
truncation = -1

def custom_construction_algo(idx, net_dict):
    # For debugging, use: python3 ./crnn/Pretrain.py config... Maybe set repetitions=1 below.
    # We will first construct layer-by-layer, starting with 2 layers.
    # Initially, we will use a higher reduction factor, and at the end, we will reduce it.
    # Also, we will initially have not label smoothing.
    orig_num_lstm_layers = 0
    while "lstm%i_fw" % orig_num_lstm_layers in net_dict:
        orig_num_lstm_layers += 1
    assert orig_num_lstm_layers >= 2
    orig_red_factor = 1
    for i in range(orig_num_lstm_layers - 1):
        orig_red_factor *= net_dict["lstm%i_pool" % i]["pool_size"][0]
    num_lstm_layers = idx + 2  # idx starts at 0. start with 2 layers
    if idx == 0:
        net_dict["lstm%i_fw" % (orig_num_lstm_layers - 1)]["dropout"] = 0
        net_dict["lstm%i_bw" % (orig_num_lstm_layers - 1)]["dropout"] = 0
    if idx >= 1:
        num_lstm_layers -= 1  # repeat like idx=0, but now with dropout
    # We will start with a higher reduction factor initially, for better convergence.
    red_factor = 2 ** 5
    if num_lstm_layers == orig_num_lstm_layers + 1:
        # Use original reduction factor now.
        num_lstm_layers = orig_num_lstm_layers
        red_factor = orig_red_factor
    if num_lstm_layers > orig_num_lstm_layers:
        # Finish. This will also use label-smoothing then.
        return None
    # Use label smoothing only at the very end.
    net_dict["output"]["unit"]["output_prob"]["loss_opts"]["label_smoothing"] = 0
    # Other options during pretraining.
    if idx == 0:
      net_dict["#config"] = {"max_seq_length": {"target_text": 60}}
      net_dict["#repetition"] = 10
    # Leave the last lstm layer as-is, but only modify its source.
    net_dict["lstm%i_fw" % (orig_num_lstm_layers - 1)]["from"] = ["lstm%i_pool" % (num_lstm_layers - 2)]
    net_dict["lstm%i_bw" % (orig_num_lstm_layers - 1)]["from"] = ["lstm%i_pool" % (num_lstm_layers - 2)]
    if red_factor > orig_red_factor:
        for i in range(num_lstm_layers - 2):
            net_dict["lstm%i_pool" % i]["pool_size"] = (2,)
        # Increase last pool-size to get the initial reduction factor.
        assert red_factor % (2 ** (num_lstm_layers - 2)) == 0
        last_pool_size = red_factor // (2 ** (num_lstm_layers - 2))
        # Increase last pool-size to get the same encoder-seq-length folding.
        net_dict["lstm%i_pool" % (num_lstm_layers - 2)]["pool_size"] = (last_pool_size,)
    # Delete non-used lstm layers. This is not explicitly necessary but maybe nicer.
    for i in range(num_lstm_layers - 1, orig_num_lstm_layers - 1):
        del net_dict["lstm%i_fw" % i]
        del net_dict["lstm%i_bw" % i]
        del net_dict["lstm%i_pool" % i]
    return net_dict

pretrain = {"repetitions": 5, "construction_algo": custom_construction_algo}

num_epochs = 250
model = "net-model/network"
cleanup_old_models = True
gradient_clip = 0
#gradient_clip_global_norm = 1.0
adam = True
optimizer_epsilon = 1e-8
#debug_add_check_numerics_ops = True
#debug_add_check_numerics_on_output = True
stop_on_nonfinite_train_score = False
tf_log_memory_usage = True
gradient_noise = 0.0
learning_rate = 0.0008
learning_rates = list(numpy.linspace(0.0003, learning_rate, num=10))  # warmup
learning_rate_control = "newbob_multi_epoch"
#learning_rate_control_error_measure = "dev_score_output"
learning_rate_control_relative_error_relative_lr = True
learning_rate_control_min_num_epochs_per_new_lr = 3
use_learning_rate_control_always = True
newbob_multi_num_epochs = EpochSplit
newbob_multi_update_interval = 1
newbob_learning_rate_decay = 0.9
learning_rate_file = "newbob.data"

# log
log_verbosity = 5
multitask_optimizer_wrapper = True
