#!crnn/rnn.py

# TED-LIUM 2, baseline 4-layer LSTM LM

import os
from subprocess import check_output
from Util import cleanup_env_var_path
cleanup_env_var_path("LD_LIBRARY_PATH", "/u/zeyer/tools/glibc217")

tf_session_opts = {'allow_soft_placement': True, 'log_device_placement': False}

# task
use_tensorflow = True
task = "train"
device = "gpu"
multiprocessing = True
update_on_device = True

_cf_cache = {}

def cf(filename):
    """Cache manager"""
    if filename in _cf_cache:
        return _cf_cache[filename]
    if check_output(["hostname"]).strip() in ["cluster-cn-211", "sulfid"]:
        print("use local file: %s" % filename)
        return filename  # for debugging
    cached_fn = check_output(["cf", filename]).strip().decode("utf8")
    assert os.path.exists(cached_fn)
    _cf_cache[filename] = cached_fn
    return cached_fn

data_files = {
    "train": ["/work/asr3/irie/data/tedlium2/word_150k/data/train.en.gz",
              "/work/asr3/irie/data/tedlium2/word_150k/data/commoncrawl-9pc.en.gz",
              "/work/asr3/irie/data/tedlium2/word_150k/data/europarl-v7-6pc.en.gz",
              "/work/asr3/irie/data/tedlium2/word_150k/data/giga-fren-4pc.en.gz",
              "/work/asr3/irie/data/tedlium2/word_150k/data/news-18pc.en.gz",
              "/work/asr3/irie/data/tedlium2/word_150k/data/news-commentary-v8-9pc.en.gz",
              "/work/asr3/irie/data/tedlium2/word_150k/data/yandex-1m-31pc.en.gz"],
    "cv": ["/work/asr3/irie/data/tedlium2/word_150k/data/dev.en.gz"],
    "test": ["/work/asr3/irie/data/tedlium2/word_150k/data/eval.en.gz"]}
vocab_file = "/work/asr3/irie/data/tedlium2/word_150k/data/vocab.returnn.freq_sorted.txt"

orth_replace_map_file = ""

num_inputs = 152267

seq_order_bin_size = 100
train_epoch_split = 10

epoch_split = {"train": train_epoch_split, "cv": 1, "test": 1}
seq_order = {
    "train": "random",
    "cv": "sorted",
    "test": "sorted"}

def get_dataset(data):
    assert data in ["train", "cv", "test"]
    return {
        "class": "LmDataset",
        "corpus_file": lambda: list(map(cf, data_files[data])),
        "orth_symbols_map_file": lambda: cf(vocab_file),
        "orth_replace_map_file": orth_replace_map_file,
        "word_based": True,
        "seq_end_symbol": "<sb>",
        "auto_replace_unknown_symbol": True,
        "unknown_symbol": "<unk>",
        "add_delayed_seq_data": True,
        "delayed_seq_data_start_symbol": "<sb>",
        "seq_ordering": seq_order[data],
        "partition_epoch": epoch_split[data],
        "parse_orth_opts": {"upper_case_special": False, "square_brackets_for_specials": False}
    }

train = get_dataset("train")
dev = get_dataset("cv")
cache_size = "0"
window = 1


def get_bias_init():
  import math
  gerstenberger_factor = 1.5
  init = math.log(1 / num_inputs) * gerstenberger_factor
  return 'constant_initializer(value={})'.format(init)

b_init = get_bias_init()


dropout_rate = 0.2

# network
# (also defined by num_inputs & num_outputs)
num_outputs = {"data": {"dim": num_inputs, "sparse": True, "dtype": "int32"}}  # sparse data
num_outputs["delayed"] = num_outputs["data"]
target = "data"
network = {
"input": {"class": "linear", "n_out": 128, "activation": "identity",
          "forward_weights_init": "random_normal_initializer(mean=0.0, stddev=0.1)",
          "from": ["data:delayed"]},
"lstm0": {"class": "rec", "unit": "lstm",
          "forward_weights_init" : "random_normal_initializer(mean=0.0, stddev=0.1)",
          "recurrent_weights_init": "random_normal_initializer(mean=0.0, stddev=0.1)",
          "bias_init": "random_normal_initializer(mean=0.0, stddev=0.1)",
          "n_out": 2048, "dropout": dropout_rate, "L2": 0.0, "direction": 1, "from": ["input"]},
"lstm1": {"class": "rec", "unit": "lstm",
          "forward_weights_init" : "random_normal_initializer(mean=0.0, stddev=0.1)",
          "recurrent_weights_init": "random_normal_initializer(mean=0.0, stddev=0.1)",
          "bias_init": "random_normal_initializer(mean=0.0, stddev=0.1)",
          "n_out": 2048, "dropout": dropout_rate, "L2": 0.0, "direction": 1, "from": ["lstm0"]},
"lstm2": {"class": "rec", "unit": "lstm",
          "forward_weights_init" : "random_normal_initializer(mean=0.0, stddev=0.1)",
          "recurrent_weights_init": "random_normal_initializer(mean=0.0, stddev=0.1)",
          "bias_init": "random_normal_initializer(mean=0.0, stddev=0.1)",
          "n_out": 2048, "dropout": dropout_rate, "L2": 0.0, "direction": 1, "from": ["lstm1"]},
"lstm3": {"class": "rec", "unit": "lstm",
          "forward_weights_init" : "random_normal_initializer(mean=0.0, stddev=0.1)",
          "recurrent_weights_init": "random_normal_initializer(mean=0.0, stddev=0.1)",
          "bias_init": "random_normal_initializer(mean=0.0, stddev=0.1)",
          "n_out": 2048, "dropout": dropout_rate, "L2": 0.0, "direction": 1, "from": ["lstm2"]},
"output": {"class": "softmax", "dropout": dropout_rate,
           "forward_weights_init": "random_normal_initializer(mean=0.0, stddev=0.1)",
           "loss": "ce", "target": "data", "from": ["lstm3"]}
}

batching = "random"
batch_size = 900
max_seq_length = 602
max_seqs = 32
chunking = "0"
num_epochs = 50
gradient_clip_global_norm = 2.
gradient_noise = 0.
learning_rate = 1.
learning_rate_control = "newbob_rel"
learning_rate_control_relative_error_relative_lr = False
newbob_relative_error_div_by_old = True
newbob_learning_rate_decay = 0.95
newbob_relative_error_threshold = -0.007
newbob_multi_update_interval = 1
learning_rate_control_error_measure = "dev_score_output:exp"


learning_rate_file = "newbob.data"
model = "net-model/network"

calculate_exp_loss = True
cleanup_old_models = {"keep_best_n": 1, "keep_last_n": 2}

# log
log = "log/crnn.%s.log" % task
log_verbosity = 4

